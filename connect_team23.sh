#!/bin/bash

# Enhanced Team Connection Script - InfiniteQuest
# Generated by Terraform with comprehensive error handling and utilities

TEAM_NAME="team23"
TEAM_DISPLAY_NAME="InfiniteQuest"
INSTANCE_TYPE="l40s-48gb.1x"
GPUS_ALLOCATED="1"
VM_IP="204.52.24.36"
PRIVATE_KEY="keys/team23_private_key"

# Colors for enhanced output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

print_status() { echo -e "${BLUE}$1${NC}"; }
print_success() { echo -e "${GREEN}$1${NC}"; }
print_warning() { echo -e "${YELLOW}$1${NC}"; }
print_error() { echo -e "${RED}$1${NC}"; }
print_info() { echo -e "${CYAN}$1${NC}"; }

# GPU status check
check_gpu_status() {
    print_status "Checking GPU status..."
    
    gpu_output=$(ssh -i "$PRIVATE_KEY" \
                     -o StrictHostKeyChecking=no \
                     -o ConnectTimeout=10 \
                     ubuntu@"$VM_IP" \
                     'nvidia-smi --query-gpu=count,name,memory.total --format=csv,noheader,nounits' 2>/dev/null || echo "GPU_CHECK_FAILED")
    
    if [ "$gpu_output" = "GPU_CHECK_FAILED" ]; then
        print_warning "Could not check GPU status (VM may still be setting up)"
        return 1
    else
        echo "   GPU Status: $gpu_output"
        return 0
    fi
}

# Port accessibility check
check_ports() {
    print_status "Checking open ports..."
    local ports=(22 80 443 3000 8080 8888 80 8080 443 8000)
    
    for port in ${ports[@]}; do
        if timeout 3 bash -c "echo >/dev/tcp/$VM_IP/$port" 2>/dev/null; then
            echo -e "   ✅ Port $port: ${GREEN}Open${NC}"
        else
            echo -e "   ⚠️  Port $port: ${YELLOW}Closed/Filtered${NC}"
        fi
    done
}

# Display comprehensive team information
show_team_info() {
    clear
    echo -e "${PURPLE}"
    echo "══════════════════════════════════════════════════════════════════════"
    echo "🎯               HACKATHON GPU INFRASTRUCTURE"
    echo "══════════════════════════════════════════════════════════════════════"
    echo -e "${NC}"
    echo ""
    echo -e "${CYAN}📋 TEAM INFORMATION:${NC}"
    echo "   Team: $TEAM_DISPLAY_NAME"
    echo "   Team ID: $TEAM_NAME"
    echo "   Contact: frankpablote@gmail.com"
    echo "   Members: 1 people"
    echo ""
    echo -e "${CYAN}🔥 GPU ALLOCATION:${NC}"
    echo "   Instance Type: $INSTANCE_TYPE"
    echo "   GPUs: $GPUS_ALLOCATED x NVIDIA L40S (48GB VRAM each)"
    echo "   Total VRAM: $(($GPUS_ALLOCATED * 48))GB"
    echo ""
    echo -e "${CYAN}🌐 NETWORK ACCESS:${NC}"
    echo "   Public IP: $VM_IP"
    echo "   SSH: ssh -i $PRIVATE_KEY ubuntu@$VM_IP"
    echo "   Open Ports: 22, 80, 443, 3000, 8080, 8888, 80, 8080, 443, 8000"
    echo ""
    echo -e "${CYAN}💾 STORAGE:${NC}"
    echo "   Persistent: 500GiB at /team_storage"
    echo "   Home: /home/ubuntu (ephemeral)"
    echo ""
    echo -e "${CYAN}👥 TEAM MEMBERS:${NC}"
    echo "   - frankpablote@gmail.com"
}

# Quick commands menu
show_quick_commands() {
    echo ""
    print_info "🛠️  Available quick commands after connecting:"
    echo "   cat ~/team_info.txt              # Full team information"
    echo "   nvidia-smi                       # Check GPU status"
    echo "   htop                            # System monitoring"
    echo "   nvtop                           # GPU monitoring"
    echo "   ls -la /team_storage            # Your persistent storage"
    echo "   jupyter notebook --ip=0.0.0.0   # Start Jupyter server"
    echo "   cd /team_storage && ls          # Navigate to team storage"
    echo ""
}

# Connection troubleshooting
show_troubleshooting() {
    echo ""
    print_warning "🔧 TROUBLESHOOTING:"
    echo "   1. VM not ready: Wait 3-5 minutes after deployment"
    echo "   2. SSH fails: Check key permissions (should be 600)"
    echo "   3. GPU not working: Run 'nvidia-smi' to check drivers"
    echo "   4. Network issues: Verify firewall rules in console"
    echo "   5. Storage issues: Check /var/log/hackathon-setup.log"
    echo ""
    echo "   Debug command: chmod 600 $PRIVATE_KEY && ssh -v -i $PRIVATE_KEY ubuntu@$VM_IP"
    echo ""
}

# Main execution
main() {
    show_team_info
    
    # Check private key
    if [ ! -f "$PRIVATE_KEY" ]; then
        print_error "Private key not found: $PRIVATE_KEY"
        exit 1
    fi
    
    # Fix key permissions
    chmod 600 "$PRIVATE_KEY" 2>/dev/null
    
    # Comprehensive status check
    echo ""
    print_status "Running comprehensive status checks..."
    
    vm_ready=false

    echo ""
    print_status "Connecting to $TEAM_DISPLAY_NAME VM..."
    print_info "Use 'exit' to disconnect when done"
    echo ""
    
    # Enhanced SSH connection
    ssh -i "$PRIVATE_KEY" \
        -o StrictHostKeyChecking=no \
        -o ServerAliveInterval=30 \
        -o ServerAliveCountMax=3 \
        -o ConnectTimeout=15 \
        ubuntu@"$VM_IP"
    
    echo ""
    print_success "Disconnected from $TEAM_DISPLAY_NAME"
    print_info "Connection script: $0"
}

# Handle interruption gracefully
trap 'print_error "Connection interrupted"; exit 1' INT TERM

# Execute main function
main "$@" 